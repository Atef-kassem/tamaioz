<!-- <link rel="stylesheet" href="/css/style.css" /> -->
<style>
  body {
    font-family: "Cairo", Tahoma, Arial, sans-serif;
    background: linear-gradient(120deg, #e0e7ff 0%, #f7f8fa 100%);
    margin: 0;
    padding: 0;
    /* direction: rtl; */
  }
  h1 {
    text-align: center;
    color: #2d3e50;
    margin-top: 30px;
    letter-spacing: 1px;
    font-size: 2.2em;
    text-shadow: 0 2px 8px #b6d0ff40;
  }
  #searchInput {
    display: block;
    margin: 20px auto 10px auto;
    padding: 12px 18px;
    width: 340px;
    border-radius: 25px;
    border: 1.5px solid #b6d0ff;
    font-size: 1.1em;
    background: #fff;
    transition: box-shadow 0.2s, border 0.2s;
    box-shadow: 0 2px 8px #e3e8f0;
  }
  #searchInput:focus {
    box-shadow: 0 0 8px #4f8cff80;
    outline: none;
    border: 1.5px solid #4f8cff;
  }
  #addMainCriteriaBtn {
    display: block;
    margin: 0 auto 28px auto;
    background: linear-gradient(90deg, #4f8cff 0%, #38b6ff 100%);
    color: #fff;
    border: none;
    padding: 14px 34px;
    border-radius: 25px;
    font-size: 1.15em;
    cursor: pointer;
    box-shadow: 0 4px 16px #b6d0ff40;
    transition: background 0.2s, transform 0.1s, box-shadow 0.2s;
    font-weight: bold;
    letter-spacing: 0.5px;
  }
  #addMainCriteriaBtn:hover {
    background: linear-gradient(90deg, #38b6ff 0%, #4f8cff 100%);
    transform: translateY(-2px) scale(1.04);
    box-shadow: 0 8px 24px #b6d0ff60;
  }
  .criteria-tree {
    list-style: none;
    padding: 0 30px;
    max-width: 850px;
    margin: 0 auto;
  }
  .criteria-tree li {
    background: #fff;
    margin: 12px 0 12px 0;
    border-radius: 14px;
    box-shadow: 0 2px 12px #e3e8f0;
    padding: 20px 20px 20px 12px;
    display: block;
    position: relative;
    transition: box-shadow 0.2s, background 0.2s;
    border: 1.5px solid #f0f4ff;
  }
  .criteria-tree li:hover {
    box-shadow: 0 6px 24px #b6d0ff40;
    background: #f4f8ff;
    border: 1.5px solid #b6d0ff;
  }
  .toggle-children {
    font-size: 1.5em;
    margin-left: 10px;
    color: #4f8cff;
    transition: transform 0.2s, color 0.2s;
    user-select: none;
    vertical-align: middle;
    cursor: pointer;
  }
  .toggle-children.open {
    transform: rotate(90deg);
    color: #38b6ff;
  }
  .criteria-main {
    font-weight: bold;
    color: #2d3e50;
    margin: 0 12px;
    font-size: 1.18em;
    letter-spacing: 0.5px;
  }
  .criteria-sub {
    color: #4f8cff;
    margin: 0 12px;
    font-size: 1.1em;
  }
  .criteria-point {
    color: #38b6ff;
    margin: 0 12px;
    font-size: 1em;
  }
  .status {
    margin-right: auto;
    margin-left: 15px;
    font-size: 1em;
    padding: 4px 12px;
    border-radius: 8px;
    font-weight: bold;
    box-shadow: 0 1px 4px #e3e8f0;
    border: 1px solid #e3e8f0;
  }
  .status.entered {
    background: #e6fbe8;
    color: #1fa463;
    border: 1px solid #b6e7c9;
  }
  .status.not-entered {
    background: #fff2f2;
    color: #e74c3c;
    border: 1px solid #f7c6c6;
  }
  .criteria-tree button,
  .criteria-tree .btn-methodology,
  .criteria-tree .btn-attachment,
  .criteria-tree .btn-view-details {
    background: #f4f7fb;
    border: 1.5px solid #d1d5db;
    color: #4f8cff;
    border-radius: 8px;
    padding: 7px 15px;
    margin-right: 7px;
    font-size: 1em;
    cursor: pointer;
    transition: background 0.15s, color 0.15s, border 0.15s, box-shadow 0.15s;
    box-shadow: 0 1px 4px #e3e8f0;
    font-weight: 500;
    position: relative;
  }
  .criteria-tree button:hover,
  .criteria-tree .btn-methodology:hover,
  .criteria-tree .btn-attachment:hover,
  .criteria-tree .btn-view-details:hover {
    background: #e6f0ff;
    color: #2d3e50;
    border: 1.5px solid #4f8cff;
    box-shadow: 0 2px 8px #b6d0ff40;
  }
  .addSubCriteriaBtn {
    background: #38b6ff;
    color: #fff;
    border: none;
    font-size: 1.1em;
    padding: 7px 15px;
    margin-right: 10px;
    border-radius: 8px;
    transition: background 0.15s, box-shadow 0.15s;
    box-shadow: 0 1px 4px #b6d0ff40;
    font-weight: bold;
  }
  .addSubCriteriaBtn:hover {
    background: #4f8cff;
    box-shadow: 0 2px 8px #4f8cff40;
  }
  .deleteCriteriaBtn {
    background: #e74c3c;
    color: #fff;
    border: none;
    font-size: 1.1em;
    padding: 7px 15px;
    margin-right: 7px;
    border-radius: 8px;
    transition: background 0.15s, box-shadow 0.15s;
    box-shadow: 0 1px 4px #e74c3c30;
    font-weight: bold;
  }
  .deleteCriteriaBtn:hover {
    background: #c0392b;
    box-shadow: 0 2px 8px #e74c3c40;
  }
  .criteria-tree ul {
    list-style: none;
    padding-right: 30px;
    margin-top: 8px;
    margin-bottom: 0;
    border-right: 2px dashed #e3e8f0;
    transition: max-height 0.4s cubic-bezier(0.4, 2, 0.6, 1), opacity 0.3s;
    overflow: hidden;
    opacity: 1;
    max-height: 2000px;
    padding-left: 20px;
  }
  .criteria-tree ul.collapsed {
    max-height: 0;
    opacity: 0;
    padding: 0;
    margin: 0;
    border: none;
  }
  /* Modal Styles */
  #methodologyModal,
  #attachmentModal,
  #detailsModal {
    box-shadow: 0 8px 32px #4f8cff30;
    border-radius: 18px;
    animation: modalFadeIn 0.3s;
    border: 1.5px solid #b6d0ff;
  }
  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95) translate(-50%, -50%);
    }
    to {
      opacity: 1;
      transform: scale(1) translate(-50%, -50%);
    }
  }
  #methodologyModal,
  #attachmentModal,
  #detailsModal {
    position: fixed;
    top: 50%;
    left: 50%;
    width: 400px;
    max-width: 95vw;
    background: #fff;
    z-index: 1000;
    transform: translate(-50%, -50%);
    padding: 32px 26px 22px 26px;
    box-shadow: 0 8px 32px #4f8cff30;
    border-radius: 18px;
    animation: modalFadeIn 0.3s;
    display: none;
  }
  #methodologyModal button,
  #attachmentModal button,
  #detailsModal button {
    background: #4f8cff;
    color: #fff;
    border: none;
    border-radius: 8px;
    padding: 9px 20px;
    font-size: 1em;
    margin-left: 10px;
    cursor: pointer;
    transition: background 0.15s, box-shadow 0.15s;
    box-shadow: 0 1px 4px #b6d0ff40;
    font-weight: bold;
  }
  #methodologyModal button:hover,
  #attachmentModal button:hover,
  #detailsModal button:hover {
    background: #38b6ff;
    box-shadow: 0 2px 8px #4f8cff40;
  }
  #attachmentFileInput {
    margin-top: 10px;
    margin-bottom: 10px;
  }
  #attachmentUploadStatus {
    font-weight: bold;
    color: #1fa463;
  }
  #detailsAttachments a {
    color: #4f8cff;
    text-decoration: underline;
    font-size: 1em;
  }
  #detailsAttachments li {
    margin-bottom: 6px;
  }
  /* Tooltip Styles */
  .custom-tooltip {
    position: absolute;
    z-index: 9999;
    background: #2d3e50;
    color: #fff;
    padding: 7px 14px;
    border-radius: 8px;
    font-size: 1em;
    box-shadow: 0 2px 8px #4f8cff40;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.18s;
    white-space: pre-line;
    max-width: 320px;
    line-height: 1.5;
    right: 100%;
    top: 50%;
    transform: translateY(-50%);
  }
  .has-tooltip:hover .custom-tooltip,
  .has-tooltip:focus .custom-tooltip {
    opacity: 1;
  }
</style>

<h1>إدارة المعايير</h1>
<div style="position: relative; width: fit-content; margin: 0 auto">
  <input
    type="text"
    id="searchInput"
    placeholder="ابحث عن معيار..."
    class="has-tooltip"
  />
  <span
    class="custom-tooltip"
    style="right: 0; left: auto; top: 110%"
    id="tip-searchInput"
  >
    يمكنك البحث عن أي معيار بكتابة اسمه هنا
  </span>
</div>

<div style="position: relative; width: fit-content; margin: 0 auto">
  <button id="addMainCriteriaBtn" class="has-tooltip">
    إضافة معيار رئيسي جديد
  </button>
  <span
    class="custom-tooltip"
    style="right: 0; left: auto; top: 110%"
    id="tip-addMainCriteriaBtn"
  >
    اضغط لإضافة معيار رئيسي جديد إلى القائمة
  </span>
</div>

<div style="display: flex; gap: 30px; max-width: 1200px; margin: 0 auto">
  <!-- Main Criteria Tree -->
  <ul class="criteria-tree" id="criteriaTree" style="flex: 2"></ul>

  <!-- Side Info Box -->
  <div
    id="criteriaSideBox"
    style="
      flex: 1;
      background: #fff;
      border-radius: 14px;
      box-shadow: 0 2px 12px #e3e8f0;
      padding: 22px;
      min-width: 260px;
      max-width: 370px;
      display: none;
      height: fit-content;
      border: 1.5px solid #b6d0ff;
    "
  >
    <h3 style="margin-top: 0; color: #4f8cff">تسلسل المعيار</h3>
    <div id="sideBoxParent" style="margin-bottom: 10px; color: #2d3e50"></div>
    <div id="sideBoxChildren" style="color: #4f8cff"></div>
  </div>
</div>

<!-- Methodology Modal -->
<div id="methodologyModal" style="display: none">
  <h3>إدخال المنهجية</h3>
  <textarea
    id="methodologyText"
    rows="6"
    style="width: 100%"
    class="has-tooltip"
  ></textarea>
  <span
    class="custom-tooltip"
    style="right: 0; left: auto; top: 110%"
    id="tip-methodologyText"
  >
    أدخل المنهجية الخاصة بهذا المعيار هنا
  </span>
  <div style="margin-top: 10px; text-align: right">
    <button id="saveMethodologyBtn" class="has-tooltip">حفظ</button>
    <span class="custom-tooltip" id="tip-saveMethodologyBtn"
      >حفظ المنهجية المدخلة</span
    >
    <button id="cancelMethodologyBtn" class="has-tooltip">إلغاء</button>
    <span class="custom-tooltip" id="tip-cancelMethodologyBtn"
      >إغلاق النافذة بدون حفظ</span
    >
    <button
      id="openAttachmentWithTextBtn"
      class="has-tooltip"
      style="
        margin-right: 10px;
        background: #38b6ff;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 9px 20px;
        font-weight: bold;
        cursor: pointer;
      "
    >
      إضافة مرفق مع نص
    </button>
  </div>
</div>

<!-- Attachment With Text Modal -->
<div
  id="attachmentWithTextModal"
  style="
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    width: 420px;
    max-width: 95vw;
    background: #fff;
    z-index: 1100;
    transform: translate(-50%, -50%);
    padding: 32px 26px 22px 26px;
    box-shadow: 0 8px 32px #4f8cff30;
    border-radius: 18px;
    animation: modalFadeIn 0.3s;
    border: 1.5px solid #b6d0ff;
  "
>
  <h3>إضافة مرفق مع نص</h3>
  <textarea
    id="attachmentText"
    rows="4"
    style="width: 100%; margin-bottom: 12px"
    class="has-tooltip"
  ></textarea>
  <span
    class="custom-tooltip"
    style="right: 0; left: auto; top: 110%"
    id="tip-attachmentText"
    >أدخل نصاً إضافياً مع المرفق</span
  >
  <input
    type="file"
    id="attachmentWithTextFileInput"
    multiple
    class="has-tooltip"
  />
  <span
    class="custom-tooltip"
    style="right: 0; left: auto; top: 110%"
    id="tip-attachmentWithTextFileInput"
    >اختر ملف أو أكثر لرفعه كمرفق</span
  >
  <div style="margin-top: 10px; text-align: right">
    <button
      id="uploadAttachmentWithTextBtn"
      class="has-tooltip"
      style="
        background: #38b6ff;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 9px 20px;
        font-weight: bold;
        cursor: pointer;
      "
    >
      رفع
    </button>
    <span class="custom-tooltip" id="tip-uploadAttachmentWithTextBtn"
      >رفع الملفات والنص المحدد</span
    >
    <button
      id="cancelAttachmentWithTextBtn"
      class="has-tooltip"
      style="
        background: #e74c3c;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 9px 20px;
        font-weight: bold;
        cursor: pointer;
        margin-left: 10px;
      "
    >
      إلغاء
    </button>
    <span class="custom-tooltip" id="tip-cancelAttachmentWithTextBtn"
      >إغلاق النافذة بدون رفع</span
    >
  </div>
  <div
    id="attachmentWithTextUploadStatus"
    style="margin-top: 10px; font-weight: bold; color: #1fa463"
  ></div>
</div>
<!-- Attachment Modal -->
<div id="attachmentModal" style="display: none">
  <h3>رفع مرفقات</h3>
  <input type="file" id="attachmentFileInput" multiple class="has-tooltip" />
  <span
    class="custom-tooltip"
    style="right: 0; left: auto; top: 110%"
    id="tip-attachmentFileInput"
  >
    اختر ملف أو أكثر لرفعه كمرفق للمعيار
  </span>
  <div style="margin-top: 10px; text-align: right">
    <button id="uploadAttachmentBtn" class="has-tooltip">رفع</button>
    <span class="custom-tooltip" id="tip-uploadAttachmentBtn"
      >رفع الملفات المحددة</span
    >
    <button id="cancelAttachmentBtn" class="has-tooltip">إلغاء</button>
    <span class="custom-tooltip" id="tip-cancelAttachmentBtn"
      >إغلاق النافذة بدون رفع</span
    >
  </div>
  <div id="attachmentUploadStatus" style="margin-top: 10px"></div>
</div>

<!-- تعريف Modal -->
<div
  id="definitionModal"
  style="
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    width: 400px;
    max-width: 95vw;
    background: #fff;
    z-index: 1200;
    transform: translate(-50%, -50%);
    padding: 32px 26px 22px 26px;
    box-shadow: 0 8px 32px #4f8cff30;
    border-radius: 18px;
    border: 1.5px solid #b6d0ff;
  "
>
  <h3>إدخال تعريف</h3>
  <textarea
    id="definitionText"
    rows="5"
    style="width: 100%"
    class="has-tooltip"
  ></textarea>
  <span
    class="custom-tooltip"
    style="right: 0; left: auto; top: 110%"
    id="tip-definitionText"
  >
    أدخل تعريفاً لهذا المعيار هنا
  </span>
  <div style="margin-top: 10px; text-align: right">
    <button id="saveDefinitionBtn" class="has-tooltip">حفظ</button>
    <span class="custom-tooltip" id="tip-saveDefinitionBtn"
      >حفظ التعريف المدخل</span
    >
    <button id="cancelDefinitionBtn" class="has-tooltip">إلغاء</button>
    <span class="custom-tooltip" id="tip-cancelDefinitionBtn"
      >إغلاق النافذة بدون حفظ</span
    >
  </div>
</div>

<script>
  // Tooltip definitions
  const tooltips = {
    searchInput: "يمكنك البحث عن أي معيار بكتابة اسمه هنا",
    addMainCriteriaBtn: "اضغط لإضافة معيار رئيسي جديد إلى القائمة",
    methodologyText: "أدخل المنهجية الخاصة بهذا المعيار هنا",
    saveMethodologyBtn: "حفظ المنهجية المدخلة",
    cancelMethodologyBtn: "إغلاق النافذة بدون حفظ",
    attachmentFileInput: "اختر ملف أو أكثر لرفعه كمرفق للمعيار",
    uploadAttachmentBtn: "رفع الملفات المحددة",
    cancelAttachmentBtn: "إغلاق النافذة بدون رفع",
    addSubCriteriaBtn: "إضافة عنصر فرعي جديد لهذا المعيار",
    deleteCriteriaBtn: "حذف هذا المعيار نهائياً",
    btnMethodology: "إدخال أو تعديل المنهجية الخاصة بهذا المعيار",
    btnAttachment: "رفع ملفات مرفقة لهذا المعيار",
    btnViewDetails: "عرض تفاصيل المنهجية والمرفقات لهذا المعيار",
    btnDefinition: "إدخال أو تعديل تعريف لهذا المعيار",
    definitionText: "أدخل تعريفاً لهذا المعيار هنا",
    saveDefinitionBtn: "حفظ التعريف المدخل",
    cancelDefinitionBtn: "إغلاق النافذة بدون حفظ",
  };

  // Helper to add tooltip to an element
  function addTooltip(el, tipKey) {
    if (!el) return;
    el.classList.add("has-tooltip");
    let tip = document.createElement("span");
    tip.className = "custom-tooltip";
    tip.textContent = tooltips[tipKey] || "";
    el.appendChild(tip);
    // Position tooltip to left for tree buttons
    if (
      tipKey === "addSubCriteriaBtn" ||
      tipKey === "deleteCriteriaBtn" ||
      tipKey === "btnMethodology" ||
      tipKey === "btnAttachment" ||
      tipKey === "btnViewDetails" ||
      tipKey === "btnDefinition"
    ) {
      tip.style.right = "110%";
      tip.style.left = "auto";
      tip.style.top = "50%";
      tip.style.transform = "translateY(-50%)";
    }
  }

  // Add tooltips to static elements
  window.addEventListener("DOMContentLoaded", function () {
    addTooltip(document.getElementById("searchInput"), "searchInput");
    addTooltip(
      document.getElementById("addMainCriteriaBtn"),
      "addMainCriteriaBtn"
    );
    addTooltip(document.getElementById("methodologyText"), "methodologyText");
    addTooltip(
      document.getElementById("saveMethodologyBtn"),
      "saveMethodologyBtn"
    );
    addTooltip(
      document.getElementById("cancelMethodologyBtn"),
      "cancelMethodologyBtn"
    );
    addTooltip(
      document.getElementById("attachmentFileInput"),
      "attachmentFileInput"
    );
    addTooltip(
      document.getElementById("uploadAttachmentBtn"),
      "uploadAttachmentBtn"
    );
    addTooltip(
      document.getElementById("cancelAttachmentBtn"),
      "cancelAttachmentBtn"
    );
    addTooltip(document.getElementById("definitionText"), "definitionText");
    addTooltip(
      document.getElementById("saveDefinitionBtn"),
      "saveDefinitionBtn"
    );
    addTooltip(
      document.getElementById("cancelDefinitionBtn"),
      "cancelDefinitionBtn"
    );
  });

  const criteriaTree = document.getElementById("criteriaTree");
  const searchInput = document.getElementById("searchInput");
  const addMainCriteriaBtn = document.getElementById("addMainCriteriaBtn");
  const criteriaSideBox = document.getElementById("criteriaSideBox");
  const sideBoxParent = document.getElementById("sideBoxParent");
  const sideBoxChildren = document.getElementById("sideBoxChildren");

  let currentMethodologyCriteriaId = null;
  let currentAttachmentCriteriaId = null;
  let currentDefinitionCriteriaId = null;
  let criteriaDataCache = [];

  // Fetch criteria data from API and render tree
  async function fetchCriteria() {
    try {
      const res = await fetch("/api/criteria");
      const data = await res.json();
      criteriaDataCache = data;
      renderCriteriaTree(data);
    } catch (error) {
      console.error("Error fetching criteria:", error);
    }
  }

  // Render criteria tree recursively
  function renderCriteriaTree(
    criteriaList,
    parentUl = criteriaTree,
    expandAll = false // changed to false for collapsed by default
  ) {
    parentUl.innerHTML = "";
    criteriaList.forEach((item) => {
      const li = document.createElement("li");
      li.dataset.id = item._id;

      let statusClass = item.status === "entered" ? "entered" : "not-entered";
      let statusText = item.status === "entered" ? "✓ تم الإدخال" : "✗ فارغ ";

      // إخفاء أزرار المنهجية والتفاصيل والمرفقات للمعيار الرئيسي فقط
      let buttonsHtml = "";
      if (item.type !== "main") {
        buttonsHtml = `
          <button class="btn-methodology">إدخال منهجية</button>
          <button class="btn-definition">تعريف</button>
          <button class="btn-view-details">عرض التفاصيل</button>
          <button class="btn-attachment">رفع مرفقات</button>
        `;
      } else {
        // حتى العناصر الرئيسية يمكن أن يكون لها تعريف
        buttonsHtml = `<button class="btn-definition">تعريف</button>`;
      }

      li.innerHTML = `
  <span class="toggle-children" style="cursor:pointer;">&#9656;</span>
  <span class="criteria-${item.type}">${item.name}</span>
  ${buttonsHtml}
  <span class="status ${statusClass}">${statusText}</span>
  <button class="addSubCriteriaBtn">+</button>
  <button class="deleteCriteriaBtn">-</button>
  <button class="btn-properties">خصائص</button>
`;

      parentUl.appendChild(li);

      // Add tooltips to dynamic buttons/fields
      addTooltip(li.querySelector(".addSubCriteriaBtn"), "addSubCriteriaBtn");
      addTooltip(li.querySelector(".deleteCriteriaBtn"), "deleteCriteriaBtn");
      addTooltip(li.querySelector(".btn-methodology"), "btnMethodology");
      addTooltip(li.querySelector(".btn-attachment"), "btnAttachment");
      addTooltip(li.querySelector(".btn-view-details"), "btnViewDetails");
      addTooltip(li.querySelector(".btn-definition"), "btnDefinition");
      addTooltip(li.querySelector(".btn-properties"), "btnProperties");

      // Only render children if they exist
      if (item.children && item.children.length > 0) {
        const ul = document.createElement("ul");
        li.appendChild(ul);
        renderCriteriaTree(item.children, ul, expandAll);

        // Collapse children by default
        ul.classList.add("collapsed");
      }

      attachEventListeners(li, item.type);

      // Add toggle functionality for children with animation
      const toggleBtn = li.querySelector(".toggle-children");
      const childUl = li.querySelector("ul");
      if (toggleBtn && childUl) {
        toggleBtn.style.visibility = "visible";
        toggleBtn.classList.remove("open");
        toggleBtn.innerHTML = "&#9656;"; // right arrow

        toggleBtn.addEventListener("click", (e) => {
          e.stopPropagation();
          if (childUl.classList.contains("collapsed")) {
            childUl.classList.remove("collapsed");
            toggleBtn.classList.add("open");
            toggleBtn.innerHTML = "&#9662;"; // down arrow
          } else {
            childUl.classList.add("collapsed");
            toggleBtn.classList.remove("open");
            toggleBtn.innerHTML = "&#9656;"; // right arrow
          }
        });
      } else if (toggleBtn) {
        toggleBtn.style.visibility = "hidden";
      }

      // Side box: show on click or focus
      li.addEventListener("click", function (e) {
        e.stopPropagation();
        showCriteriaSideBox(item._id);
        // Optional: highlight selected
        criteriaTree
          .querySelectorAll("li")
          .forEach((el) => (el.style.background = "#fff"));
        li.style.background = "#e6f0ff";
      });
    });
  }

  // Helper to find criteria by id in tree
  function findCriteriaById(criteriaList, id) {
    for (const item of criteriaList) {
      if (item._id === id) return item;
      if (item.children) {
        const found = findCriteriaById(item.children, id);
        if (found) return found;
      }
    }
    return null;
  }

  // Helper to find parent of a node by id
  function findParentById(criteriaList, id, parent = null) {
    for (const item of criteriaList) {
      if (item._id === id) return parent;
      if (item.children) {
        const found = findParentById(item.children, id, item);
        if (found) return found;
      }
    }
    return null;
  }

  // Show side box with parent and children info
  function showCriteriaSideBox(id) {
    const node = findCriteriaById(criteriaDataCache, id);
    if (!node) {
      criteriaSideBox.style.display = "none";
      return;
    }
    // Find parent
    const parent = findParentById(criteriaDataCache, id);
    // Fix: parent may be null, but if not, show its name
    if (parent && parent.name) {
      sideBoxParent.innerHTML = `<strong>الأب:</strong> <span>${parent.name}</span>`;
    } else if (parent && !parent.name) {
      // fallback if parent exists but has no name
      sideBoxParent.innerHTML = `<strong>الأب:</strong> <span style="color:#aaa;">(لا يوجد اسم)</span>`;
    } else {
      sideBoxParent.innerHTML = `<strong>الأب:</strong> <span style="color:#aaa;">(لا يوجد)</span>`;
    }

    // List children
    if (node.children && node.children.length > 0) {
      sideBoxChildren.innerHTML =
        `<strong>الأبناء:</strong><ul style="padding-right:18px; margin:0; margin-top:5px;">` +
        node.children
          .map(
            (child) =>
              `<li style="margin-bottom:4px;">${
                child.name
              } <span style="color:#888;font-size:0.95em;">(${
                child.type === "main"
                  ? "رئيسي"
                  : child.type === "sub"
                  ? "فرعي"
                  : "نقطة"
              })</span></li>`
          )
          .join("") +
        "</ul>";
    } else {
      sideBoxChildren.innerHTML = `<strong>الأبناء:</strong> <span style="color:#aaa;">(لا يوجد)</span>`;
    }
    criteriaSideBox.style.display = "block";
  }

  // Attach event listeners to buttons in a criteria item
  function attachEventListeners(li, type) {
    const addBtn = li.querySelector(".addSubCriteriaBtn");
    const deleteBtn = li.querySelector(".deleteCriteriaBtn");
    const methodologyBtn = li.querySelector(".btn-methodology");
    const attachmentBtn = li.querySelector(".btn-attachment");
    const definitionBtn = li.querySelector(".btn-definition");
    const propertiesBtn = li.querySelector(".btn-properties");

    addBtn.addEventListener("click", async (e) => {
      e.stopPropagation();
      let newName = prompt("أدخل اسم المعيار الجديد:");
      if (!newName) return;

      let newType;
      if (type === "main") newType = "sub";
      else if (type === "sub") newType = "point";
      else {
        alert("لا يمكن إضافة عناصر فرعية لهذا النوع");
        return;
      }

      try {
        const res = await fetch("/api/criteria", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            name: newName,
            type: newType,
            parent: li.dataset.id,
          }),
        });
        if (res.ok) {
          fetchCriteria();
        } else {
          alert("فشل في إضافة المعيار");
        }
      } catch (error) {
        console.error("Error adding criteria:", error);
      }
    });

    deleteBtn.addEventListener("click", async (e) => {
      e.stopPropagation();
      if (!confirm("هل أنت متأكد من حذف هذا المعيار؟")) return;
      try {
        const res = await fetch(`/api/criteria/${li.dataset.id}`, {
          method: "DELETE",
        });
        if (res.ok) {
          fetchCriteria();
        } else {
          alert("فشل في حذف المعيار");
        }
      } catch (error) {
        console.error("Error deleting criteria:", error);
      }
    });

    methodologyBtn &&
      methodologyBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        currentMethodologyCriteriaId = li.dataset.id;
        // Fetch current methodology text
        fetch("/api/criteria")
          .then((res) => res.json())
          .then((data) => {
            const criteria = findCriteriaById(
              data,
              currentMethodologyCriteriaId
            );
            document.getElementById("methodologyText").value =
              criteria?.methodology || "";
            document.getElementById("methodologyModal").style.display = "block";
          });
      });

    attachmentBtn &&
      attachmentBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        currentAttachmentCriteriaId = li.dataset.id;
        document.getElementById("attachmentFileInput").value = "";
        document.getElementById("attachmentUploadStatus").textContent = "";
        document.getElementById("attachmentModal").style.display = "block";
      });

    definitionBtn &&
      definitionBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        currentDefinitionCriteriaId = li.dataset.id;
        // جلب التعريف الحالي
        fetch("/api/criteria")
          .then((res) => res.json())
          .then((data) => {
            const criteria = findCriteriaById(
              data,
              currentDefinitionCriteriaId
            );
            document.getElementById("definitionText").value =
              criteria?.definition || "";
            document.getElementById("definitionModal").style.display = "block";
          });
      });

    propertiesBtn &&
      propertiesBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        currentPropertiesCriteriaId = li.dataset.id;
        // Fetch current properties
        fetch("/api/criteria")
          .then((res) => res.json())
          .then((data) => {
            const criteria = findCriteriaById(
              data,
              currentPropertiesCriteriaId
            );
            const properties = criteria?.properties || [];
            showPropertiesModal(properties);
          });
      });
  }

  // Methodology modal buttons
  document
    .getElementById("saveMethodologyBtn")
    .addEventListener("click", async () => {
      const methodology = document.getElementById("methodologyText").value;
      if (!currentMethodologyCriteriaId) return;
      try {
        const res = await fetch(
          `/api/criteria/${currentMethodologyCriteriaId}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ methodology }),
          }
        );
        if (res.ok) {
          alert("تم حفظ المنهجية بنجاح");
          document.getElementById("methodologyModal").style.display = "none";
          fetchCriteria();
        } else {
          alert("فشل في حفظ المنهجية");
        }
      } catch (error) {
        console.error("Error saving methodology:", error);
      }
    });

  // Properties modal elements and functions
  const propertiesModal = document.createElement("div");
  propertiesModal.id = "propertiesModal";
  propertiesModal.style = `
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    width: 500px;
    max-width: 95vw;
    background: #fff;
    z-index: 1300;
    transform: translate(-50%, -50%);
    padding: 20px 26px 22px 26px;
    box-shadow: 0 8px 32px #4f8cff30;
    border-radius: 18px;
    border: 1.5px solid #b6d0ff;
  `;

  propertiesModal.innerHTML = `
    <h3>خصائص المعيار</h3>
    <div id="propertiesList" style="max-height: 300px; overflow-y: auto; margin-bottom: 12px;"></div>
    <button id="addPropertyBtn" style="background: #38b6ff; color: white; border: none; border-radius: 8px; padding: 8px 16px; font-weight: bold; cursor: pointer;">إضافة خاصية جديدة</button>
    <div style="margin-top: 15px; text-align: right;">
      <button id="savePropertiesBtn" style="background: #4f8cff; color: white; border: none; border-radius: 8px; padding: 9px 20px; font-weight: bold; cursor: pointer;">حفظ</button>
      <button id="cancelPropertiesBtn" style="background: #e74c3c; color: white; border: none; border-radius: 8px; padding: 9px 20px; font-weight: bold; cursor: pointer; margin-left: 10px;">إلغاء</button>
    </div>
  `;

  document.body.appendChild(propertiesModal);

  let currentPropertiesCriteriaId = null;
  let currentProperties = [];

  function showPropertiesModal(properties) {
    currentProperties = JSON.parse(JSON.stringify(properties)); // deep copy
    renderPropertiesList();
    propertiesModal.style.display = "block";
  }

  function renderPropertiesList() {
    const container = document.getElementById("propertiesList");
    container.innerHTML = "";
    currentProperties.forEach((prop, index) => {
      const propDiv = document.createElement("div");
      propDiv.style =
        "border: 1px solid #b6d0ff; border-radius: 8px; padding: 10px; margin-bottom: 8px; position: relative;";
      propDiv.innerHTML = `
        <input type="text" placeholder="اسم الخاصية" value="${prop.name}" style="width: 30%; margin-right: 10px; padding: 6px;" data-index="${index}" data-field="name" />
        <input type="text" placeholder="القيمة" value="${prop.value}" style="width: 30%; margin-right: 10px; padding: 6px;" data-index="${index}" data-field="value" />
        <input type="text" placeholder="نص توضيحي" value="${prop.description}" style="width: 30%; padding: 6px;" data-index="${index}" data-field="description" />
        <button style="position: absolute; top: 6px; right: 6px; background: #e74c3c; color: white; border: none; border-radius: 6px; padding: 2px 8px; cursor: pointer;" data-index="${index}" class="removePropertyBtn">حذف</button>
      `;
      container.appendChild(propDiv);
    });

    // Add event listeners for inputs and remove buttons
    container.querySelectorAll("input").forEach((input) => {
      input.addEventListener("input", (e) => {
        const idx = e.target.getAttribute("data-index");
        const field = e.target.getAttribute("data-field");
        currentProperties[idx][field] = e.target.value;
      });
    });
    container.querySelectorAll(".removePropertyBtn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const idx = e.target.getAttribute("data-index");
        currentProperties.splice(idx, 1);
        renderPropertiesList();
      });
    });
  }

  document.getElementById("addPropertyBtn").addEventListener("click", () => {
    currentProperties.push({ name: "", value: "", description: "" });
    renderPropertiesList();
  });

  document
    .getElementById("savePropertiesBtn")
    .addEventListener("click", async () => {
      if (!currentPropertiesCriteriaId) return;
      try {
        const res = await fetch(
          `/api/criteria/${currentPropertiesCriteriaId}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ properties: currentProperties }),
          }
        );
        if (res.ok) {
          alert("تم حفظ الخصائص بنجاح");
          propertiesModal.style.display = "none";
          fetchCriteria();
        } else {
          alert("فشل في حفظ الخصائص");
        }
      } catch (error) {
        console.error("Error saving properties:", error);
      }
    });

  document
    .getElementById("cancelPropertiesBtn")
    .addEventListener("click", () => {
      propertiesModal.style.display = "none";
    });

  document
    .getElementById("cancelMethodologyBtn")
    .addEventListener("click", () => {
      document.getElementById("methodologyModal").style.display = "none";
    });

  // New button to open attachment with text modal
  document
    .getElementById("openAttachmentWithTextBtn")
    .addEventListener("click", () => {
      document.getElementById("attachmentWithTextModal").style.display =
        "block";
    });

  // Attachment with text modal buttons
  document
    .getElementById("uploadAttachmentWithTextBtn")
    .addEventListener("click", async () => {
      const text = document.getElementById("attachmentText").value;
      const files = document.getElementById(
        "attachmentWithTextFileInput"
      ).files;
      if (!currentMethodologyCriteriaId) {
        alert("لم يتم تحديد المعيار");
        return;
      }
      if (files.length === 0) {
        alert("يرجى اختيار ملف واحد على الأقل");
        return;
      }
      const formData = new FormData();
      formData.append("attachmentText", text);
      for (const file of files) {
        formData.append("attachments", file);
      }
      try {
        const res = await fetch(
          `/api/criteria/${currentMethodologyCriteriaId}/attachmentsWithText`,
          {
            method: "POST",
            body: formData,
          }
        );
        if (res.ok) {
          document.getElementById(
            "attachmentWithTextUploadStatus"
          ).textContent = "تم رفع الملفات والنص بنجاح";
          document.getElementById("attachmentWithTextModal").style.display =
            "none";
          fetchCriteria();
        } else {
          alert("فشل في رفع الملفات والنص");
        }
      } catch (error) {
        console.error("Error uploading attachments with text:", error);
      }
    });

  document
    .getElementById("cancelAttachmentWithTextBtn")
    .addEventListener("click", () => {
      document.getElementById("attachmentWithTextModal").style.display = "none";
    });

  // Attachment modal buttons
  document
    .getElementById("uploadAttachmentBtn")
    .addEventListener("click", async () => {
      const files = document.getElementById("attachmentFileInput").files;
      if (!currentAttachmentCriteriaId || files.length === 0) {
        alert("يرجى اختيار ملف واحد على الأقل");
        return;
      }
      const formData = new FormData();
      for (const file of files) {
        formData.append("attachments", file);
      }
      try {
        const res = await fetch(
          `/api/criteria/${currentAttachmentCriteriaId}/attachments`,
          {
            method: "POST",
            body: formData,
          }
        );
        if (res.ok) {
          document.getElementById("attachmentUploadStatus").textContent =
            "تم رفع الملفات بنجاح";
          fetchCriteria();
        } else {
          alert("فشل في رفع الملفات");
        }
      } catch (error) {
        console.error("Error uploading attachments:", error);
      }
    });

  document
    .getElementById("cancelAttachmentBtn")
    .addEventListener("click", () => {
      document.getElementById("attachmentModal").style.display = "none";
    });

  // تعريف modal buttons
  document
    .getElementById("saveDefinitionBtn")
    .addEventListener("click", async () => {
      const definition = document.getElementById("definitionText").value;
      if (!currentDefinitionCriteriaId) return;
      try {
        const res = await fetch(
          `/api/criteria/${currentDefinitionCriteriaId}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ definition }),
          }
        );
        if (res.ok) {
          alert("تم حفظ التعريف بنجاح");
          document.getElementById("definitionModal").style.display = "none";
          fetchCriteria();
        } else {
          alert("فشل في حفظ التعريف");
        }
      } catch (error) {
        console.error("Error saving definition:", error);
      }
    });

  document
    .getElementById("cancelDefinitionBtn")
    .addEventListener("click", () => {
      document.getElementById("definitionModal").style.display = "none";
    });

  // Search/filter functionality
  searchInput.addEventListener("input", () => {
    const filter = searchInput.value.toLowerCase();
    const items = criteriaTree.getElementsByTagName("li");

    Array.from(items).forEach((item) => {
      const text = item.textContent.toLowerCase();
      if (text.includes(filter)) {
        item.style.display = "";
      } else {
        item.style.display = "none";
      }
    });
  });

  addMainCriteriaBtn.addEventListener("click", async () => {
    const newName = prompt("أدخل اسم المعيار الرئيسي الجديد:");
    if (!newName) return;
    try {
      const res = await fetch("/api/criteria", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: newName, type: "main", parent: null }),
      });
      if (res.ok) {
        fetchCriteria();
      } else {
        alert("فشل في إضافة المعيار الرئيسي");
      }
    } catch (error) {
      console.error("Error adding main criteria:", error);
    }
  });

  // Initial fetch
  fetchCriteria();
</script>

<!-- Details Modal -->
<div id="detailsModal" style="display: none">
  <h3>تفاصيل المعيار</h3>
  <div>
    <strong>المنهجية:</strong>
    <p id="detailsMethodology" style="white-space: pre-wrap"></p>
  </div>
  <div>
    <strong>المرفقات:</strong>
    <ul id="detailsAttachments"></ul>
  </div>
  <div style="margin-top: 10px; text-align: right">
    <button id="closeDetailsBtn" class="has-tooltip">إغلاق</button>
    <span class="custom-tooltip" id="tip-closeDetailsBtn"
      >إغلاق نافذة التفاصيل</span
    >
  </div>
</div>

<script>
  // Details modal buttons
  document.getElementById("closeDetailsBtn").addEventListener("click", () => {
    document.getElementById("detailsModal").style.display = "none";
  });

  // Extend attachEventListeners to handle details button
  const originalAttachEventListeners = attachEventListeners;
  attachEventListeners = function (li, type) {
    originalAttachEventListeners(li, type);

    const detailsBtn = li.querySelector(".btn-view-details");
    detailsBtn &&
      detailsBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        const criteriaId = li.dataset.id;
        fetch("/api/criteria")
          .then((res) => res.json())
          .then((data) => {
            const criteria = findCriteriaById(data, criteriaId);
            if (!criteria) return;
            document.getElementById("detailsMethodology").textContent =
              criteria.methodology || "(لا توجد منهجية)";
            const attachmentsList =
              document.getElementById("detailsAttachments");
            attachmentsList.innerHTML = "";
            if (criteria.attachments && criteria.attachments.length > 0) {
              criteria.attachments.forEach((filePath) => {
                const li = document.createElement("li");
                const a = document.createElement("a");
                a.href = filePath;
                a.target = "_blank";
                a.textContent = filePath.split("/").pop();
                li.appendChild(a);
                attachmentsList.appendChild(li);
              });
            } else {
              attachmentsList.innerHTML = "<li>(لا توجد مرفقات)</li>";
            }
            document.getElementById("detailsModal").style.display = "block";
          });
      });
  };
</script>
